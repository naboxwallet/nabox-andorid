package com.nuls.naboxpro.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nuls.naboxpro.entity.WalletInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WALLET_INFO".
*/
public class WalletInfoDao extends AbstractDao<WalletInfo, Long> {

    public static final String TABLENAME = "WALLET_INFO";

    /**
     * Properties of entity WalletInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NulsAddress = new Property(1, String.class, "nulsAddress", false, "NULS_ADDRESS");
        public final static Property NerveAddress = new Property(2, String.class, "nerveAddress", false, "NERVE_ADDRESS");
        public final static Property EthAddress = new Property(3, String.class, "ethAddress", false, "ETH_ADDRESS");
        public final static Property BscAddress = new Property(4, String.class, "bscAddress", false, "BSC_ADDRESS");
        public final static Property HecoAddress = new Property(5, String.class, "hecoAddress", false, "HECO_ADDRESS");
        public final static Property DecompressPubKey = new Property(6, byte[].class, "decompressPubKey", false, "DECOMPRESS_PUB_KEY");
        public final static Property CompressedPubKey = new Property(7, byte[].class, "compressedPubKey", false, "COMPRESSED_PUB_KEY");
        public final static Property EncryptedPriKey = new Property(8, byte[].class, "encryptedPriKey", false, "ENCRYPTED_PRI_KEY");
        public final static Property PriKey = new Property(9, byte[].class, "priKey", false, "PRI_KEY");
        public final static Property OktAddress = new Property(10, String.class, "oktAddress", false, "OKT_ADDRESS");
        public final static Property Alias = new Property(11, String.class, "alias", false, "ALIAS");
        public final static Property Color = new Property(12, int.class, "color", false, "COLOR");
        public final static Property UsdPrice = new Property(13, String.class, "usdPrice", false, "USD_PRICE");
    }


    public WalletInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WalletInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WALLET_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NULS_ADDRESS\" TEXT," + // 1: nulsAddress
                "\"NERVE_ADDRESS\" TEXT," + // 2: nerveAddress
                "\"ETH_ADDRESS\" TEXT," + // 3: ethAddress
                "\"BSC_ADDRESS\" TEXT," + // 4: bscAddress
                "\"HECO_ADDRESS\" TEXT," + // 5: hecoAddress
                "\"DECOMPRESS_PUB_KEY\" BLOB," + // 6: decompressPubKey
                "\"COMPRESSED_PUB_KEY\" BLOB," + // 7: compressedPubKey
                "\"ENCRYPTED_PRI_KEY\" BLOB," + // 8: encryptedPriKey
                "\"PRI_KEY\" BLOB," + // 9: priKey
                "\"OKT_ADDRESS\" TEXT," + // 10: oktAddress
                "\"ALIAS\" TEXT," + // 11: alias
                "\"COLOR\" INTEGER NOT NULL ," + // 12: color
                "\"USD_PRICE\" TEXT);"); // 13: usdPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WALLET_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WalletInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nulsAddress = entity.getNulsAddress();
        if (nulsAddress != null) {
            stmt.bindString(2, nulsAddress);
        }
 
        String nerveAddress = entity.getNerveAddress();
        if (nerveAddress != null) {
            stmt.bindString(3, nerveAddress);
        }
 
        String ethAddress = entity.getEthAddress();
        if (ethAddress != null) {
            stmt.bindString(4, ethAddress);
        }
 
        String bscAddress = entity.getBscAddress();
        if (bscAddress != null) {
            stmt.bindString(5, bscAddress);
        }
 
        String hecoAddress = entity.getHecoAddress();
        if (hecoAddress != null) {
            stmt.bindString(6, hecoAddress);
        }
 
        byte[] decompressPubKey = entity.getDecompressPubKey();
        if (decompressPubKey != null) {
            stmt.bindBlob(7, decompressPubKey);
        }
 
        byte[] compressedPubKey = entity.getCompressedPubKey();
        if (compressedPubKey != null) {
            stmt.bindBlob(8, compressedPubKey);
        }
 
        byte[] encryptedPriKey = entity.getEncryptedPriKey();
        if (encryptedPriKey != null) {
            stmt.bindBlob(9, encryptedPriKey);
        }
 
        byte[] priKey = entity.getPriKey();
        if (priKey != null) {
            stmt.bindBlob(10, priKey);
        }
 
        String oktAddress = entity.getOktAddress();
        if (oktAddress != null) {
            stmt.bindString(11, oktAddress);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(12, alias);
        }
        stmt.bindLong(13, entity.getColor());
 
        String usdPrice = entity.getUsdPrice();
        if (usdPrice != null) {
            stmt.bindString(14, usdPrice);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WalletInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nulsAddress = entity.getNulsAddress();
        if (nulsAddress != null) {
            stmt.bindString(2, nulsAddress);
        }
 
        String nerveAddress = entity.getNerveAddress();
        if (nerveAddress != null) {
            stmt.bindString(3, nerveAddress);
        }
 
        String ethAddress = entity.getEthAddress();
        if (ethAddress != null) {
            stmt.bindString(4, ethAddress);
        }
 
        String bscAddress = entity.getBscAddress();
        if (bscAddress != null) {
            stmt.bindString(5, bscAddress);
        }
 
        String hecoAddress = entity.getHecoAddress();
        if (hecoAddress != null) {
            stmt.bindString(6, hecoAddress);
        }
 
        byte[] decompressPubKey = entity.getDecompressPubKey();
        if (decompressPubKey != null) {
            stmt.bindBlob(7, decompressPubKey);
        }
 
        byte[] compressedPubKey = entity.getCompressedPubKey();
        if (compressedPubKey != null) {
            stmt.bindBlob(8, compressedPubKey);
        }
 
        byte[] encryptedPriKey = entity.getEncryptedPriKey();
        if (encryptedPriKey != null) {
            stmt.bindBlob(9, encryptedPriKey);
        }
 
        byte[] priKey = entity.getPriKey();
        if (priKey != null) {
            stmt.bindBlob(10, priKey);
        }
 
        String oktAddress = entity.getOktAddress();
        if (oktAddress != null) {
            stmt.bindString(11, oktAddress);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(12, alias);
        }
        stmt.bindLong(13, entity.getColor());
 
        String usdPrice = entity.getUsdPrice();
        if (usdPrice != null) {
            stmt.bindString(14, usdPrice);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WalletInfo readEntity(Cursor cursor, int offset) {
        WalletInfo entity = new WalletInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nulsAddress
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nerveAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ethAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bscAddress
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // hecoAddress
            cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6), // decompressPubKey
            cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7), // compressedPubKey
            cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8), // encryptedPriKey
            cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9), // priKey
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // oktAddress
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // alias
            cursor.getInt(offset + 12), // color
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // usdPrice
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WalletInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNulsAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNerveAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEthAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBscAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setHecoAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDecompressPubKey(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
        entity.setCompressedPubKey(cursor.isNull(offset + 7) ? null : cursor.getBlob(offset + 7));
        entity.setEncryptedPriKey(cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8));
        entity.setPriKey(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
        entity.setOktAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAlias(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setColor(cursor.getInt(offset + 12));
        entity.setUsdPrice(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WalletInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WalletInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WalletInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
