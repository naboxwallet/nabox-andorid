package com.nuls.naboxpro.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nuls.naboxpro.entity.DAppBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAPP_BEAN".
*/
public class DAppBeanDao extends AbstractDao<DAppBean, Long> {

    public static final String TABLENAME = "DAPP_BEAN";

    /**
     * Properties of entity DAppBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property KeyId = new Property(0, Long.class, "keyId", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Chain = new Property(2, String.class, "chain", false, "CHAIN");
        public final static Property FileType = new Property(3, String.class, "fileType", false, "FILE_TYPE");
        public final static Property Status = new Property(4, int.class, "status", false, "STATUS");
        public final static Property Sort = new Property(5, int.class, "sort", false, "SORT");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property Icon = new Property(7, String.class, "icon", false, "ICON");
        public final static Property FileName = new Property(8, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileNameEn = new Property(9, String.class, "fileNameEn", false, "FILE_NAME_EN");
        public final static Property FileDesc = new Property(10, String.class, "fileDesc", false, "FILE_DESC");
        public final static Property FileDescEn = new Property(11, String.class, "fileDescEn", false, "FILE_DESC_EN");
        public final static Property CreateDate = new Property(12, String.class, "createDate", false, "CREATE_DATE");
        public final static Property UpdateTime = new Property(13, Long.class, "updateTime", false, "UPDATE_TIME");
    }


    public DAppBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DAppBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAPP_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: keyId
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"CHAIN\" TEXT," + // 2: chain
                "\"FILE_TYPE\" TEXT," + // 3: fileType
                "\"STATUS\" INTEGER NOT NULL ," + // 4: status
                "\"SORT\" INTEGER NOT NULL ," + // 5: sort
                "\"URL\" TEXT," + // 6: url
                "\"ICON\" TEXT," + // 7: icon
                "\"FILE_NAME\" TEXT," + // 8: fileName
                "\"FILE_NAME_EN\" TEXT," + // 9: fileNameEn
                "\"FILE_DESC\" TEXT," + // 10: fileDesc
                "\"FILE_DESC_EN\" TEXT," + // 11: fileDescEn
                "\"CREATE_DATE\" TEXT," + // 12: createDate
                "\"UPDATE_TIME\" INTEGER);"); // 13: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAPP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DAppBean entity) {
        stmt.clearBindings();
 
        Long keyId = entity.getKeyId();
        if (keyId != null) {
            stmt.bindLong(1, keyId);
        }
        stmt.bindLong(2, entity.getId());
 
        String chain = entity.getChain();
        if (chain != null) {
            stmt.bindString(3, chain);
        }
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(4, fileType);
        }
        stmt.bindLong(5, entity.getStatus());
        stmt.bindLong(6, entity.getSort());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(8, icon);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(9, fileName);
        }
 
        String fileNameEn = entity.getFileNameEn();
        if (fileNameEn != null) {
            stmt.bindString(10, fileNameEn);
        }
 
        String fileDesc = entity.getFileDesc();
        if (fileDesc != null) {
            stmt.bindString(11, fileDesc);
        }
 
        String fileDescEn = entity.getFileDescEn();
        if (fileDescEn != null) {
            stmt.bindString(12, fileDescEn);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(13, createDate);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(14, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DAppBean entity) {
        stmt.clearBindings();
 
        Long keyId = entity.getKeyId();
        if (keyId != null) {
            stmt.bindLong(1, keyId);
        }
        stmt.bindLong(2, entity.getId());
 
        String chain = entity.getChain();
        if (chain != null) {
            stmt.bindString(3, chain);
        }
 
        String fileType = entity.getFileType();
        if (fileType != null) {
            stmt.bindString(4, fileType);
        }
        stmt.bindLong(5, entity.getStatus());
        stmt.bindLong(6, entity.getSort());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(8, icon);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(9, fileName);
        }
 
        String fileNameEn = entity.getFileNameEn();
        if (fileNameEn != null) {
            stmt.bindString(10, fileNameEn);
        }
 
        String fileDesc = entity.getFileDesc();
        if (fileDesc != null) {
            stmt.bindString(11, fileDesc);
        }
 
        String fileDescEn = entity.getFileDescEn();
        if (fileDescEn != null) {
            stmt.bindString(12, fileDescEn);
        }
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(13, createDate);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(14, updateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DAppBean readEntity(Cursor cursor, int offset) {
        DAppBean entity = new DAppBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // keyId
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chain
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileType
            cursor.getInt(offset + 4), // status
            cursor.getInt(offset + 5), // sort
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // icon
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fileName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fileNameEn
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fileDesc
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fileDescEn
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // createDate
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DAppBean entity, int offset) {
        entity.setKeyId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setChain(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.getInt(offset + 4));
        entity.setSort(cursor.getInt(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIcon(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFileName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFileNameEn(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFileDesc(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFileDescEn(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreateDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUpdateTime(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DAppBean entity, long rowId) {
        entity.setKeyId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DAppBean entity) {
        if(entity != null) {
            return entity.getKeyId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DAppBean entity) {
        return entity.getKeyId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
