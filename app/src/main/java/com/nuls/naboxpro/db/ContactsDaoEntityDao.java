package com.nuls.naboxpro.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nuls.naboxpro.entity.ContactsDaoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACTS_DAO_ENTITY".
*/
public class ContactsDaoEntityDao extends AbstractDao<ContactsDaoEntity, Long> {

    public static final String TABLENAME = "CONTACTS_DAO_ENTITY";

    /**
     * Properties of entity ContactsDaoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Icon = new Property(1, Long.class, "icon", false, "ICON");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property ChainId = new Property(3, String.class, "chainId", false, "CHAIN_ID");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Avator = new Property(5, String.class, "avator", false, "AVATOR");
    }


    public ContactsDaoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ContactsDaoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACTS_DAO_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ICON\" INTEGER," + // 1: icon
                "\"NAME\" TEXT," + // 2: name
                "\"CHAIN_ID\" TEXT," + // 3: chainId
                "\"ADDRESS\" TEXT UNIQUE ," + // 4: address
                "\"AVATOR\" TEXT);"); // 5: avator
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACTS_DAO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactsDaoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long icon = entity.getIcon();
        if (icon != null) {
            stmt.bindLong(2, icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String chainId = entity.getChainId();
        if (chainId != null) {
            stmt.bindString(4, chainId);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String avator = entity.getAvator();
        if (avator != null) {
            stmt.bindString(6, avator);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactsDaoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long icon = entity.getIcon();
        if (icon != null) {
            stmt.bindLong(2, icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String chainId = entity.getChainId();
        if (chainId != null) {
            stmt.bindString(4, chainId);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String avator = entity.getAvator();
        if (avator != null) {
            stmt.bindString(6, avator);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ContactsDaoEntity readEntity(Cursor cursor, int offset) {
        ContactsDaoEntity entity = new ContactsDaoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // icon
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chainId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // avator
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactsDaoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIcon(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChainId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAvator(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ContactsDaoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ContactsDaoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContactsDaoEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
